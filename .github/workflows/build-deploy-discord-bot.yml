name: Build and Deploy Lambda Functions

on:
  workflow_dispatch:      
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.check-results.outputs.passed }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x] # Node versions you want to test against
        include:
          - lambda-path: authorizer-lambda
          - lambda-path: dispatcher-lambda
          - lambda-path: entrypoint-lambda
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ matrix.lambda-path }}/package-lock.json
      - name: Install dependencies
        run: |
          cd ${{ matrix.lambda-path }} && npm install
      - name: Run tests and collect coverage
        continue-on-error: true
        run: |
          cd ${{ matrix.lambda-path }} && npm test -- --coverage
      - name: Check all test results
        id: check-results
        if: always()
        run: |
          result=0
          echo "Checking results..."
          for path in authorizer-lambda dispatcher-lambda entrypoint-lambda; do
            if [ -f "${{ github.workspace }}/$path/failed" ]; then
              echo "$path tests failed."
              result=1
            fi
          done
          echo "passed=$result" > $GITHUB_OUTPUT
      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.lambda-path }}
          path: |
            ${{ matrix.lambda-path }}/coverage/lcov-report
            ${{ matrix.lambda-path }}/coverage/lcov.info

  build:
    needs: test
    if: ${{ needs.test.outputs.tests-passed == '0' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install SAM CLI
        run: pip install aws-sam-cli
      - name: Build SAM Application
        run: sam build
      - name: Cache SAM build artifacts
        uses: actions/cache@v4
        with:
          path: .aws-sam/build
          key: ${{ runner.os }}-sam-build-${{ hashFiles('**/template.yaml') }}
          restore-keys: |
            ${{ runner.os }}-sam-build-
      - name: Upload SAM Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sam-build-artifacts
          path: .aws-sam/build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install SAM CLI
        run: pip install aws-sam-cli
      - name: Deploy SAM Application
        run: sam deploy --no-confirm-changeset --region ${{ env.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "eu-west-2"
